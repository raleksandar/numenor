const invalidNumber = `Invalid number literal:`;
export const TrailingSeparator = `${invalidNumber} no trailing separator allowed`;
export const SeparatorAfterExponent = `${invalidNumber} no separator allowed after exponent mark`;
export const SeparatorBeforeExponent = `${invalidNumber} no separator allowed before exponent mark`;
export const SeparatorAfterExponentSign = `${invalidNumber} no separator allowed after exponent sign`;
export const SeparatorAfterPeriod = `${invalidNumber} no separator allowed after decimal point`;
export const SeparatorBeforePeriod = `${invalidNumber} no separator allowed before decimal point`;
export const ExpectedExponent = `${invalidNumber} expected exponent`;
export const ExpectedHexadecimalDigit = `${invalidNumber} expected hexadecimal digit`;
export const ExpectedOctalDigit = `${invalidNumber} expected octal digit`;
export const ExpectedBinaryDigit = `${invalidNumber} expected binary digit`;

const invalidString = `Invalid string literal:`;
export const UnterminatedString = `${invalidString} missing closing quote`;
export const InvalidEscapeSequence = `${invalidString} invalid escape sequence`;
export const HexadecimalEscape = `${invalidString} expected 2-digit hexadecimal character code`;
export const UnicodeEscape = `${invalidString} expected 4-digit hexadecimal character code`;
export const UnicodeCodePointEscape = `${invalidString} expected hexadecimal Unicode code point`;
export const UnicodeCodePointInvalid = `${invalidString} undefined Unicode code point`;
